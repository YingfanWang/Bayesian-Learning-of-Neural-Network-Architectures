
class Network(nn.Module):
  
  def __init__(self):
    super().__init__()
    self.fc1 = BayesLinear(1, 50, False)
    self.fc2 = BayesLinear(50, 50, True)
    self.fc3 = BayesLinear(50, 50, True)
    self.fc4 = BayesLinear(50, 50, True)
    self.fc5 = BayesLinear(50, 50, True)
    self.fc6 = BayesLinear(50, 50, True)
    self.fc7 = BayesLinear(50, 1, False)
    self.loss_fn = nn.MSELoss(reduction = 'sum')
    self.layer_list = [self.fc1, self.fc2, self.fc3, self.fc4, self.fc5, self.fc6, self.fc7]
    
  def calc_VI(self):
      
    VI_tot = 0
    for layer in self.layer_list:
        VI_tot = VI_tot + layer.weight_VI + layer.bias_VI + layer.layer_VI
        if layer.bypass:
            VI_tot = VI_tot + layer.bypass_VI
    
    return VI_tot
  
  def calc_loss(self, x, y, num_train_samples = 1):
    
    loss1_store = torch.zeros((1, num_train_samples))
    loss2_store = torch.zeros((1, num_train_samples))
    
    for rrr in range(num_train_samples):

      out = self.forward(x)
      loss = self.loss_fn(out, y)
      loss1_store[0, rrr] = loss
      loss2_store[0, rrr] = self.calc_VI()
      
      final_loss1 = torch.mean(loss1_store)
      final_loss2 = torch.mean(loss2_store)
    return final_loss1, final_loss2
  
  
  def forward(self, x):
      
    for layer in self.layer_list[:-1]:
        x = F.relu(layer(x))
    x = self.layer_list[-1](x)

    return x
